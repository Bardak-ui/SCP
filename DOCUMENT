Рассказать о моем проетке

план рабо:
### Распределение моделей по проекту: Система контроля проектов на Django

---

#### **1. Пользователь (User)**
Используем встроенную модель `User` Django или расширяем её через `AbstractUser` или `OneToOneField`.

##### Поля:
- **username**: Имя пользователя (встроенное).
- **email**: Email пользователя (встроенное).
- **password**: Пароль (встроенное).
- **first_name**: Имя.
- **last_name**: Фамилия.
- **avatar**: Картинка профиля.
- **bio**: Краткая информация о пользователе.
- **role**: Роль пользователя (администратор, участник).
- **is_active**: Активен ли пользователь (встроенное).

---

#### **2. Проект (Project)**
##### Поля:
- **name**: Название проекта.
- **description**: Описание проекта.
- **owner**: Владелец проекта (`ForeignKey` на `User`).
- **participants**: Участники проекта (`ManyToManyField` с `User`).
- **status**: Статус проекта (выбор из: активный, завершённый, замороженный).
- **start_date**: Дата начала проекта.
- **end_date**: Дата завершения проекта (опционально).
- **created_at**: Дата создания проекта.
- **updated_at**: Дата последнего обновления.

---

#### **3. Задача (Task)**
##### Поля:
- **title**: Название задачи.
- **description**: Описание задачи.
- **project**: Связь с проектом (`ForeignKey` на `Project`).
- **assignee**: Исполнитель задачи (`ForeignKey` на `User`).
- **priority**: Приоритет задачи (низкий, средний, высокий).
- **status**: Статус задачи (новая, в работе, завершена).
- **created_at**: Дата создания задачи.
- **updated_at**: Дата последнего обновления.

---

#### **4. Подзадача (SubTask)**
##### Поля:
- **title**: Название подзадачи.
- **description**: Описание подзадачи.
- **parent_task**: Родительская задача (`ForeignKey` на `Task`).
- **status**: Статус подзадачи (новая, в работе, завершена).
- **assignee**: Исполнитель подзадачи (`ForeignKey` на `User`, опционально).
- **created_at**: Дата создания.
- **updated_at**: Дата последнего обновления.

---

#### **5. Комментарии (Comment)**
##### Поля:
- **task**: Связь с задачей (`ForeignKey` на `Task`).
- **author**: Автор комментария (`ForeignKey` на `User`).
- **content**: Текст комментария.
- **created_at**: Дата создания.

---

#### **6. Уведомления (Notification)**
##### Поля:
- **user**: Пользователь, которому адресовано уведомление (`ForeignKey` на `User`).
- **message**: Текст уведомления.
- **is_read**: Прочитано ли уведомление.
- **created_at**: Дата создания.

---

#### **7. Активность (Activity)**
##### Поля:
- **user**: Пользователь, совершивший действие (`ForeignKey` на `User`).
- **project**: Проект, связанный с активностью (`ForeignKey` на `Project`, опционально).
- **task**: Задача, связанная с активностью (`ForeignKey` на `Task`, опционально).
- **action**: Тип действия (создание, обновление, удаление).
- **timestamp**: Дата и время действия.

---

### Пример структуры базы данных
1. **Связи**:
   - `User` связан с `Project` через поле владельца и `ManyToMany` для участников.
   - `Project` связан с `Task` через `ForeignKey`.
   - `Task` связан с `SubTask`, `Comment`, `Activity`.
   - `Notification` связан с `User`.

2. **Реализация ManyToMany**:
   - Для участников в проекте используем поле `participants` с `through` для указания ролей.

---

git add . && git commit -m "2.01.2025" && git push origin main
pip freeze > requirements.txt
python manage.py collectstatic

ВАЖНОСТЬ
1.разобраться csrftoken -
2.переделать отображение task при нажатии на него (расширить до отдельной страницы info_task.html
   вся информация о задачи
   над задачей могут работать один человек (подумать над добавлением кол-во человек котрые могут работать над проектом)
   Кнопки 
      Изменить 
      Отказаться от выполнения
      назад (передача project_id)

)
3.адаптировать сайт под телефоны +-

# придумать реализацию хранения кода проекта
# сделать функцию для вступления и вступление в разруботку задачи для проекта
# сделать удаление проекта +
# сделать сортировку проектов (названию, выполнености, дате, сложности)
# доделать админку добавить (выдача предупрждений, удаление учетной записи(только для сперадмина))
# добавить загрузка файлов для проектов с кодом 
# 
# 
# добавить на страницы info_project миниатюрные аватарки в поле "над проектом работают" и при нажатии на них переход на страницу этого пользователя
# Сделать мини форурм (models сделать класс с постами)
распределить все файлы templates, static по папка (если у меня будут несколько приложений в проекте)
в static разделить  css js по папкам
добавить папку img при необходимости для хранения фотографий на сайте (не фото пользователей)
изменить во всех html язык на ru 
!!!подумать над шаблонизатором джинджер для упрощения написания html страницы {% block название секции %}
                                                                    {% endblock %}

* пример 
{% extends 'путь к шаблону' %}

{% block content %}
   <h1>пример содержания</h1>

{% endblock %}




