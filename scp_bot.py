import os
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ConversationHandler, CallbackQueryHandler, ContextTypes
from asgiref.sync import sync_to_async

# –î–æ–±–∞–≤—å—Ç–µ –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SystemControleProject.settings')
import django
django.setup()

from scp.models import Profile

TOKEN = '7724435274:AAG2pzTE01tPR6tAHY8UPEIN89qvaDKyPYE3'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU, SETTINGS, PROFILE, USERS = range(4)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def menu_bk():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')],
        [InlineKeyboardButton('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='users')],
        [InlineKeyboardButton('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')],
        [InlineKeyboardButton('‚ùå –í—ã—Ö–æ–¥', callback_data='exit')],
    ])

# –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
def profile_bk():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–û–±–æ –º–Ω–µ', callback_data='about')],
        [InlineKeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º', callback_data='set_name')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')],
    ])

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def settings_bk():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —É—á.–∑–∞–ø–∏—Å—å', callback_data='del_acc')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')],
    ])

def users_bk():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')],
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    start_menu = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(start_menu, reply_markup=menu_bk())
    return MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'profile':
        await query.edit_message_text("üë§ –ü—Ä–æ—Ñ–∏–ª—å", reply_markup=profile_bk())
        return PROFILE

    elif query.data == 'users':
        await query.edit_message_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", reply_markup=users_bk())
        return USERS

    elif query.data == 'settings':
        await query.edit_message_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_bk())
        return SETTINGS

    elif query.data == 'exit':
        await query.edit_message_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'about':
        user = query.from_user
        await query.edit_message_text(
            f"–û –≤–∞—Å:\n–Æ–∑–µ—Ä–Ω–µ–π–º: {user.username}\n–ò–º—è: {user.first_name}",
            reply_markup=profile_bk()
        )
    elif query.data == 'back':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_bk())
        return MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'back':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_bk())
        return MENU

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@sync_to_async
def get_all_profiles_sync():
    return list(Profile.objects.all())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'users':
        profiles = await get_all_profiles_sync()
        if profiles:
            for profile in profiles:
                avatar = await sync_to_async(lambda: profile.avatar.path if profile.avatar else None)()
                puser = await sync_to_async(lambda: profile.puser)()
                role = await sync_to_async(lambda: profile.role)()
                bio = await sync_to_async(lambda: profile.bio)()
                message = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n‚úò –ò–º—è: {puser}\n‚úò –†–æ–ª—å: {role}\n‚úò –ë–∏–æ: {bio}\n"

                if avatar and os.path.exists(avatar):
                    with open(avatar, 'rb') as photo:
                        await query.message.reply_photo(photo=photo, caption=message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message.reply_photo
                else:
                    await query.message.reply_text(message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message.reply_text
        else:
            await query.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message.reply_text
    elif query.data == 'back':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_bk())
        return MENU

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [CallbackQueryHandler(menu)],
            PROFILE: [CallbackQueryHandler(profile)],
            SETTINGS: [CallbackQueryHandler(settings)],
            USERS: [CallbackQueryHandler(get_user)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()